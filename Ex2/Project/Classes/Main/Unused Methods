    /**
     * Solves for the shortest path from src to dest using Dijkstra's algorithm for a single pair
     *
     * @param src  an integer representing the source
     * @param dest an integer representing the destination
     * @return a double value representing the shortest distance
     */
    private double DijkstraAlgo(int src, int dest) { //used in Center!
        double[] dist = new double[graph.nodeSize()];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;

        HashSet<Integer> settled = new HashSet<>();
        PriorityQueue<Node> prq = new PriorityQueue<>(graph.nodeSize()); //priority queue with initial capacity

        prq.add(new Node(src, 0));
        dist[src] = 0;
        int unreachable = -1;

        while (settled.size() != graph.nodeSize()) { //O(|V|)
            if (prq.isEmpty()) {
                settled.add(unreachable--); //ignores unreachable nodes and increases settled size to achieve stop cond.
                //also advances unreachable towards the negative for Hashing purposes
                continue;
            }
            int u = prq.remove().node;
            if (u == dest)
                return dist[dest];
            settled.add(u);
            adjacentHelper(u, settled, dist, prq, null); // O(|V|)
        }
        return dist[dest];
    }